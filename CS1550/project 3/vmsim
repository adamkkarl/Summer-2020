#!/usr/bin/env python

import getopt, sys

__author__ = "Adam Karl"

def PTE():
  def write():
    """simulate page write"""
    self.dirty = True

  def getaddr():
    return self.addr

  def getDirtyBit():
    return self.dirty

  def __init__(self, addr):
    self.addr = addr
    self.dirty = False

def opt(numFrames, pageSize, f):
  """simulate optimal page replacement algorithm"""
  accesses = 0
  faults = 0
  writes = 0

  with open(file) as f:
    for line in f:
      pass
  f.close()

  print("Algorithm: LRU")
  print("Number of frames: %d" % numFrames)
  print("Page size: %d KB" % pageSize)
  print("Total memory accesses: %d" % accesses)
  print("Total page faults: %d" % faults)
  print("Total memory accesses: %d" % writes)

def lru(numFrames, pageSize, file):
  """simulate least recently used page replacement algorithm"""
  accesses = 0
  faults = 0
  writes = 0

  with open(file) as f:
    for line in f:
      pass
  f.close()

  print("Algorithm: LRU")
  print("Number of frames: %d" % numFrames)
  print("Page size: %d KB" % pageSize)
  print("Total memory accesses: %d" % accesses)
  print("Total page faults: %d" % faults)
  print("Total memory accesses: %d" % writes)



def main():
  numFrames = None
  pageSize = None
  alg = None
  file = None

  try:
    opts, args = getopt.getopt(sys.argv[1:], "n:p:a:")
  except:
    print("bad arguments")

  for opt, arg in opts:
    if opt in ['-n']:
      numFrames = int(arg)
    elif opt in ['-p']:
      pageSize = int(arg)
    elif opt in ['-a']:
      alg = arg
  file = args[0]

  if (alg == "opt"):
    opt(numFrames, pageSize, file)
  elif (alg == "lru"):
    lru(numFrames, pageSize, file)
  else:
    print("input 'opt' or 'lru' as the algorithm type")


if __name__ == "__main__":
  main()
