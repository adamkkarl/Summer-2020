#!/usr/bin/env python

import getopt, sys

__author__ = "Adam Karl"

class PTE:
  def write(self):
    """simulate page write"""
    self.dirty = True

  def getAddr(self):
    return self.addr

  def getDirtyBit(self):
    return self.dirty

  def __init__(self, addr):
    self.addr = addr
    self.dirty = False

def calculateBaseAddr(addr, size):
  """given an address and page size, calculate the starting address of the page it's in"""
  s = size * 1000 #since size is given in KB
  offset = addr % s #offset from the beginning of the page
  return addr - offset


def opt(numFrames, pageSize, f):
  """simulate optimal page replacement algorithm"""
  pass

def lru(numFrames, pageSize, file):
  """simulate least recently used page replacement algorithm"""
  accesses = 0
  faults = 0
  writes = 0

  memory = list()
  

  with open(file) as f:
    for line in f:
      l = line.strip().split()
      op = l[0]
      addr = int(l[1], 0)

      baseAddr = calculateBaseAddr(addr, pageSize)
      found = False
      p = None
      for i in range(len(memory)):
        page = memory[i]
        if(page.getAddr() == baseAddr):
          found = True
          p = memory.pop(i) #put accessed page at end of queue
          break

      if(not found): #not in memory = page fault
        faults += 1
        p = PTE(baseAddr)
        if(len(memory) >= numFrames): #no room in memory; need to evict one
          old = memory.pop(0) 
          if(old.getDirtyBit):  #is eviction clean or dirty?
            writes += 1
          
      if (op == "l"):
        accesses += 1
      elif (op == "s"):
        p.write() #sets dirty bit to 1
      memory.append(p)  #put at end of queue

  f.close()

  print("Algorithm: LRU")
  print("Number of frames: %d" % numFrames)
  print("Page size: %d KB" % pageSize)
  print("Total memory accesses: %d" % accesses)
  print("Total page faults: %d" % faults)
  print("Total writes to disk: %d" % writes)


def main():
  numFrames = None
  pageSize = None
  alg = None
  file = None

  try:
    opts, args = getopt.getopt(sys.argv[1:], "n:p:a:")
  except:
    print("bad arguments")

  for opt, arg in opts:
    if opt in ['-n']:
      numFrames = int(arg)
    elif opt in ['-p']:
      pageSize = int(arg)
    elif opt in ['-a']:
      alg = arg
  file = args[0]

  if (alg == "opt"):
    opt(numFrames, pageSize, file)
  elif (alg == "lru"):
    lru(numFrames, pageSize, file)
  else:
    print("input 'opt' or 'lru' as the algorithm type")


if __name__ == "__main__":
  main()
